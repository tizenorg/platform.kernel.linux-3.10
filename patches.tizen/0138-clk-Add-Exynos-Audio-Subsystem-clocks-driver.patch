From c6cf52e8b00fa5205677342e1d9dc6d3c688c2ef Mon Sep 17 00:00:00 2001
From: Sylwester Nawrocki <s.nawrocki@samsung.com>
Date: Thu, 21 Feb 2013 21:23:42 +0100
Subject: [PATCH 0138/1302] clk: Add Exynos Audio Subsystem clocks driver

TODO: gate clocks.

Signed-off-by: Sylwester Nawrocki <s.nawrocki@samsung.com>
Signed-off-by: Tomasz Figa <t.figa@samsung.com>
Signed-off-by: MyungJoo Ham <myungjoo.ham@samsung.com>
---
 .../bindings/clock/exynos4-audss-clock.txt         |  57 ++++++++++
 drivers/clk/samsung/Makefile                       |   1 +
 drivers/clk/samsung/clk-exynos4-audss.c            | 118 +++++++++++++++++++++
 drivers/clk/samsung/clk-exynos4.c                  |   4 -
 4 files changed, 176 insertions(+), 4 deletions(-)
 create mode 100644 Documentation/devicetree/bindings/clock/exynos4-audss-clock.txt
 create mode 100644 drivers/clk/samsung/clk-exynos4-audss.c

diff --git a/Documentation/devicetree/bindings/clock/exynos4-audss-clock.txt b/Documentation/devicetree/bindings/clock/exynos4-audss-clock.txt
new file mode 100644
index 0000000..4126fab
--- /dev/null
+++ b/Documentation/devicetree/bindings/clock/exynos4-audss-clock.txt
@@ -0,0 +1,57 @@
+* Samsung Exynos4 Audio Subsystem Clock Controller
+
+The Exynos4 Audio Subsystem clock controller generates and supplies clocks
+to Audio Subsystem block available in the Exynos4 SoCs. The clock binding
+described here is applicable to all SoC's in the Exynos4 family.
+
+
+Required Properties:
+
+- comptible: should be one of the following.
+  - "samsung,exynos4-audss-clock" - controller compatible with all Exynos4 SoCs.
+
+- reg: physical base address of the controller and length of memory mapped
+  region.
+
+- #clock-cells: should be 1.
+
+The following is the list of clocks generated by the controller. Each clock is
+assigned an identifier and client nodes use this identifier to specify the
+clock which they consume. Some of the clocks are available only on a particular
+Exynos4 SoC and this is specified where applicable.
+
+
+Provided clocks:
+
+	Clock		ID	SoC (if specific)
+	-----------------------------------------------
+
+	mout_audss	0
+	dout_rp		1
+	dout_aud_bus	2
+	mout_i2s	3
+	dout_i2sclk0	4
+	clk_i2s0	5
+	clk_pcm0	6
+
+
+Example 1: An example of a clock controller node is listed below.
+
+	clock_audss: clock-controller@03810000 {
+		compatible = "samsung,exynos4-audss-clock";
+		reg = <0x03810000 0x0C>;
+		#clock-cells = <1>;
+	};
+
+Example 2: I2S controller node that consumes the clock generated by the clock
+	   controller. Refer to the standard clock bindings for information
+	   about 'clocks' and 'clock-names' property.
+
+	i2s0: i2s@03830000 {
+		compatible = "samsung,i2s-v5";
+		reg = <0x03830000 0x100>;
+		clocks = <&clock_audss 0>, <&clock_audss 3>, <&clock_audss 1>,
+			<&clock_audss 2>, <&clock_audss 4>, <&clock_audss 2>;
+		clock-names = "mout_audss", "mout_i2s", "dout_srp",
+			"dout_bus", "dout_i2s", "i2s_opclk0";
+	};
diff --git a/drivers/clk/samsung/Makefile b/drivers/clk/samsung/Makefile
index b7c232e..ec86c33 100644
--- a/drivers/clk/samsung/Makefile
+++ b/drivers/clk/samsung/Makefile
@@ -6,3 +6,4 @@ obj-$(CONFIG_COMMON_CLK)	+= clk.o clk-pll.o
 obj-$(CONFIG_ARCH_EXYNOS4)	+= clk-exynos4.o
 obj-$(CONFIG_SOC_EXYNOS5250)	+= clk-exynos5250.o
 obj-$(CONFIG_SOC_EXYNOS5440)	+= clk-exynos5440.o
+obj-$(CONFIG_PLAT_SAMSUNG)	+= clk-exynos4-audss.o
diff --git a/drivers/clk/samsung/clk-exynos4-audss.c b/drivers/clk/samsung/clk-exynos4-audss.c
new file mode 100644
index 0000000..978c5de
--- /dev/null
+++ b/drivers/clk/samsung/clk-exynos4-audss.c
@@ -0,0 +1,118 @@
+/*
+ * Copyright (c) 2013 Samsung Electronics Co., Ltd.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * Driver for Exynos4 SoC Audio Subsystem clocks.
+*/
+#include <linux/kernel.h>
+#include <linux/clk.h>
+#include <linux/clkdev.h>
+#include <linux/clk-provider.h>
+#include <linux/of.h>
+#include <linux/of_address.h>
+#include <linux/syscore_ops.h>
+
+#include "clk.h"
+
+#define AUDSS_CLKSRC			0x00
+#define AUDSS_CLKDIV			0x04
+#define AUDSS_CLKGATE			0x08
+
+/* IP Clock Gate 0 Registers */
+#define EXYNOS_AUDSS_CLKGATE_RP		(1 << 0)
+#define EXYNOS_AUDSS_CLKGATE_I2SBUS	(1 << 2)
+#define EXYNOS_AUDSS_CLKGATE_I2S_SPEC	(1 << 3)
+#define EXYNOS_AUDSS_CLKGATE_PCMBUS	(1 << 4)
+#define EXYNOS_AUDSS_CLKGATE_PCM_SPEC	(1 << 5)
+#define EXYNOS_AUDSS_CLKGATE_GPIO	(1 << 6)
+#define EXYNOS_AUDSS_CLKGATE_UART	(1 << 7)
+#define EXYNOS_AUDSS_CLKGATE_TIMER	(1 << 8)
+
+#define CLK_MOUT_AUDSS			0
+#define CLK_DOUT_RP			1
+#define CLK_DOUT_AUD_BUS		2
+#define CLK_MOUT_I2S			3
+#define CLK_DOUT_I2SCLK0		4
+#define CLK_I2S0			5
+#define CLK_PCM0			6
+#define AUDSS_CLK_MAX			7
+
+static const char *mux_audss_p[] __initconst = {
+	"xxti", "fout_epll"
+};
+static const char *mux_i2s_p[] __initconst = {
+	"mout_audss", "iiscdclk0", "sclk_audio0"
+};
+
+static struct clk_onecell_data clk_data;
+static void __iomem *io_base;
+static struct clk *clks[AUDSS_CLK_MAX];
+
+static int samsung_audss_clk_suspend(void)
+{
+	/* TODO: */
+	return 0;
+}
+
+static void samsung_audss_clk_resume(void)
+{
+	/* TODO: */
+}
+
+static struct syscore_ops samsung_audss_clk_syscore_ops = {
+	.suspend = samsung_audss_clk_suspend,
+	.resume	 = samsung_audss_clk_resume,
+};
+
+
+#ifdef CONFIG_OF
+static struct of_device_id audss_of_match[] __initdata = {
+	{ .compatible = "samsung,exynos4-audss-clock" },
+	{ },
+};
+#endif
+
+static DEFINE_SPINLOCK(audss_clk_lock);
+
+static int samsung_audss_clk_init(void)
+{
+	struct device_node *node;
+
+	node = of_find_matching_node(NULL, audss_of_match);
+	if (!node)
+		return -ENODEV;
+
+	io_base = of_iomap(node, 0);
+	if (WARN_ON(!io_base))
+		return -ENOMEM;
+
+	clks[CLK_MOUT_AUDSS] = clk_register_mux(NULL, "mout_audss",
+		mux_audss_p, ARRAY_SIZE(mux_audss_p), CLK_SET_RATE_PARENT,
+		io_base + AUDSS_CLKSRC, 0, 1, 0, &audss_clk_lock);
+	clks[CLK_MOUT_I2S] = clk_register_mux(NULL, "mout_i2s0",
+		mux_i2s_p, ARRAY_SIZE(mux_i2s_p), CLK_SET_RATE_PARENT,
+		io_base + AUDSS_CLKSRC, 2, 2, 0, &audss_clk_lock);
+
+	clks[CLK_DOUT_RP] = clk_register_divider(NULL, "dout_rp",
+		"mout_audss", CLK_SET_RATE_PARENT, io_base + AUDSS_CLKDIV,
+		0, 4, 0, &audss_clk_lock);
+	clks[CLK_DOUT_AUD_BUS] = clk_register_divider(NULL, "dout_aud_bus",
+		"dout_rp", CLK_SET_RATE_PARENT, io_base + AUDSS_CLKDIV,
+		4, 4, 0, &audss_clk_lock);
+	clks[CLK_DOUT_I2SCLK0] = clk_register_divider(NULL, "dout_i2s0",
+		"mout_i2s0", CLK_SET_RATE_PARENT, io_base + AUDSS_CLKDIV,
+		8, 4, 0, &audss_clk_lock);
+
+	/* TODO: Add gate clocks */
+
+	clk_data.clks = clks;
+	clk_data.clk_num = ARRAY_SIZE(clks);
+	of_clk_add_provider(node, of_clk_src_onecell_get, &clk_data);
+
+	register_syscore_ops(&samsung_audss_clk_syscore_ops);
+	return 0;
+}
+postcore_initcall(samsung_audss_clk_init);
diff --git a/drivers/clk/samsung/clk-exynos4.c b/drivers/clk/samsung/clk-exynos4.c
index f2a338f..c68b207 100644
--- a/drivers/clk/samsung/clk-exynos4.c
+++ b/drivers/clk/samsung/clk-exynos4.c
@@ -856,10 +856,6 @@ struct samsung_gate_clock exynos4x12_gate_clks[] __initdata = {
 			E4X12_GATE_IP_ISP, 3, 0, 0),
 	GATE_A(wdt, "watchdog", "aclk100",
 			E4X12_GATE_IP_PERIR, 14, 0, 0, "watchdog"),
-	GATE_DA(pcm0, "samsung-pcm.0", "pcm0", "aclk100",
-			E4X12_GATE_IP_MAUDIO, 2, 0, 0, "pcm"),
-	GATE_DA(i2s0, "samsung-i2s.0", "i2s0", "aclk100",
-			E4X12_GATE_IP_MAUDIO, 3, 0, 0, "iis"),
 	GATE(fimc_isp, "isp", "aclk200", E4X12_GATE_ISP0, 0,
 			CLK_IGNORE_UNUSED, 0),
 	GATE(fimc_drc, "drc", "aclk200", E4X12_GATE_ISP0, 1,
-- 
1.8.3.2

