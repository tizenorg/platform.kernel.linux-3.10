From 3f3a5827ceeb9c5cbdb32825c802d8a13952f530 Mon Sep 17 00:00:00 2001
From: Lukasz Majewski <l.majewski@samsung.com>
Date: Thu, 14 Feb 2013 19:41:39 +0100
Subject: [PATCH 0094/1302] cpufreq: Define cpufreq as a platform device

Now the cpufreq has been defined as a platform device. It will facilitate
binding to parameters passed via device tree.

We shall tweak the cpufreq configuration via board dependent dts files,
not per platform specific files.

Signed-off-by: Lukasz Majewski <l.majewski@samsung.com>
Signed-off-by: MyungJoo Ham <myungjoo.ham@samsung.com>
---
 arch/arm/boot/dts/exynos4.dtsi   |  4 ++++
 drivers/cpufreq/exynos-cpufreq.c | 35 ++++++++++++++++++++++++++++++++++-
 2 files changed, 38 insertions(+), 1 deletion(-)

diff --git a/arch/arm/boot/dts/exynos4.dtsi b/arch/arm/boot/dts/exynos4.dtsi
index 3876b12..5a6bf05 100644
--- a/arch/arm/boot/dts/exynos4.dtsi
+++ b/arch/arm/boot/dts/exynos4.dtsi
@@ -623,4 +623,8 @@
 		samsung,power-domain = <&pd_lcd0>;
 		status = "ok";
 	};
+
+	cpufreq {
+		compatible = "samsung,exynos-cpufreq";
+	};
 };
diff --git a/drivers/cpufreq/exynos-cpufreq.c b/drivers/cpufreq/exynos-cpufreq.c
index 475b4f6..976598f 100644
--- a/drivers/cpufreq/exynos-cpufreq.c
+++ b/drivers/cpufreq/exynos-cpufreq.c
@@ -17,6 +17,9 @@
 #include <linux/regulator/consumer.h>
 #include <linux/cpufreq.h>
 #include <linux/suspend.h>
+#include <linux/export.h>
+#include <linux/of.h>
+#include <linux/of_platform.h>
 
 #include <plat/cpu.h>
 
@@ -279,7 +282,16 @@ static struct cpufreq_driver exynos_driver = {
 #endif
 };
 
-static int __init exynos_cpufreq_init(void)
+/* Device Tree Support for CPU freq */
+
+#ifdef CONFIG_OF
+static struct of_device_id exynos_cpufreq_of_match[] __initconst = {
+	{ .compatible = "samsung,exynos-cpufreq", },
+	{ },
+};
+#endif
+
+static int __init exynos_cpufreq_probe(struct platform_device *pdev)
 {
 	int ret = -EINVAL;
 
@@ -329,4 +341,25 @@ err_vdd_arm:
 	pr_debug("%s: failed initialization\n", __func__);
 	return -EINVAL;
 }
+
+static struct platform_driver exynos_cpufreq_driver = {
+	.probe		= exynos_cpufreq_probe,
+	.driver		= {
+		.owner		= THIS_MODULE,
+		.name		= "exynos-cpufreq",
+		.of_match_table = of_match_ptr(exynos_cpufreq_of_match),
+	}
+};
+
+static int __init exynos_cpufreq_init(void)
+{
+	int ret;
+	ret = platform_driver_register(&exynos_cpufreq_driver);
+	if (ret) {
+		pr_err("%s: Failed to register CPUFREQ driver\n", __func__);
+	}
+
+	return ret;
+}
+
 late_initcall(exynos_cpufreq_init);
-- 
1.8.3.2

